#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Joy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry 
import time
from random import randint

class Joystick(object):

    def __init__(self):
        self.axes = 6*[0.,]
        self.buttons = 6*[0.,]    
	rospy.Subscriber("/joy", Joy, self.callback)
	

    def callback(self, msg):
        self.axes = msg.axes
        self.buttons = msg.buttons
	
class Ubicacion(object):

    def __init__(self):
        self.posx = 0
        self.posy = 0
        self.posz = 0

        self.orientationx = 0    
	self.orientationy = 0    
	self.orientationz = 0    
	rospy.Subscriber('/odom', Odometry, self.callback)
	

    def callback(self, msg):
	self.posx=round(msg.pose.pose.position.x,2)
	self.posy=round(msg.pose.pose.position.y,2)
	self.posz=round(msg.pose.pose.position.z,2)
	
	self.orientationx=round(msg.pose.pose.orientation.x,5)
	self.orientationy=round(msg.pose.pose.orientation.y,5)
	self.orientationz=round(msg.pose.pose.orientation.z,5)
	#print(round(msg.pose.pose.orientation.x,3))

velocity_publisher = rospy.Publisher('/cmd_vel/managed',Twist, queue_size=10)   
                                                                                         
vel_msg = Twist()         #Definimos una variable de tipo Twist

#vel_msg.linear.x = 0.5    #Asignamos una velocidad lineal de 0.5 m/s
#vel_msg.angular.z = 0.1   #Asignamos una velocidad angular de 0.1 rad/seg


rospy.init_node("testJoystick")
joystick = Joystick()
ubicacion= Ubicacion()
# Loop rate (in Hz)
aux=0 
tempx=0
tempy=0
tempz=0
modo=0
aux_2=0
ori=1
xdeseado=0.0
ydeseado=0.0
pos_ori=True
temp_modo=0
rate = rospy.Rate(100)
revision=0
# Continuous execution loop
print("Presione triangulo modo manual o L2 modo posicion deseada")
print("Manejo manual activo por defecto")
while not rospy.is_shutdown():
    #scan_sub = rospy.Subscriber('/odom', Odometry, callback)
    # Show the axes and buttons
    #print '\naxis:', joystick.axes
    #print 'buttons:', joystick.buttons
    #print(ubicacion.orientation) 
    #print("X_OR:"+str(ubicacion.orientationx)+" Y_OR:"+str(ubicacion.orientationy))
    #vel_msg.linear.x = -0.2
    
    
		

    if joystick.buttons[0]==1:
	print("Modo manual activado...")
	modo=0
    elif joystick.buttons[4]==1:
	veri_ingreso=True
	print("Modo posicion deseada activado...")
	while(True):
		try:		
			xdeseado=float(raw_input("Ingrese posicion X deseada: "))
			ydeseado=float(raw_input("Ingrese posicion Y deseada: "))
			break
		except ValueError:
			print("Valores ingresados incorrectos por favor ingrese nuevamente") 
		
	modo=1
    

    #Direccion adelante atras    
    if joystick.buttons[2]==1:
	#print("adelante")	
	
	vel_msg.linear.x = -0.6 
    elif joystick.buttons[3]==1:
	#print("atras")
	vel_msg.linear.x = 0.6 
    elif joystick.buttons[1]==1:
	vel_msg.linear.x = 0.0
 	#vel_msg.angular.z = 0.0 
    
 	#vel_msg.angular.z = 0.0 
    else:
	#vel_msg.linear.x = -0.4
	vel_msg.linear.x = 0.0 
	
	#direccion izq derecha
    if joystick.axes[4]==1:
	#print("Izquierda")
	vel_msg.angular.z = 0.5 
    elif joystick.axes[4]==-1:
	#print("Derecha")
	vel_msg.angular.z = -0.5 
    else:
	vel_msg.angular.z = 0.0 
 

    #Manejo a posicion indicada
    if(modo==1):
	    
            
	    posdeseada=True
	    aux=0
	    vel_msg.linear.x = 0.0
            velocity_publisher.publish(vel_msg)
	    aux_2+=1
	
	    if(aux_2>10):
		    if(round(ubicacion.orientationx,4)!=0  ):
			    #print("XOR:"+str(round(ubicacion.orientationx,4))+" YOR:"+str(round(ubicacion.orientationy,4)))
			    print("Girando...")
			    vel_msg.angular.z = -0.3
			    velocity_publisher.publish(vel_msg)
		
		    else:
			  
			    vel_msg.angular.z = 0.0
			    velocity_publisher.publish(vel_msg)
			    modo=2
			    aux_2=0
			    
			    while(posdeseada):
				    if(round(ubicacion.posx,1)>xdeseado):
					vel_msg.linear.x=-0.4
					velocity_publisher.publish(vel_msg)
				    elif(round(ubicacion.posx,1)<xdeseado):
					vel_msg.linear.x=0.4
					velocity_publisher.publish(vel_msg)
				    else:
					print("X alcanzado")
					vel_msg.linear.x=0.0
					vel_msg.angular.z=0.0
					velocity_publisher.publish(vel_msg)
					time.sleep(5)
					modo=2
					posdeseada=False
			   	    print("X deseado: "+str(xdeseado)+" Posicion x actual: "+str(ubicacion.posx))
				    #print(ubicacion.posx)
				    if joystick.buttons[0]==1:
					print("Modo manual activado...")
					modo=0
					posdeseada=False
    
    if(modo==2):
	aux_2+=1
	
	posdeseada=True
	aux=0
	vel_msg.linear.x = 0.0
        velocity_publisher.publish(vel_msg)
        if(aux_2>10):
		if(round(ubicacion.orientationx,4)!=round(ubicacion.orientationy,4) ):
		    #print("XOR:"+str(round(ubicacion.orientationx,4))+" YOR:"+str(round(ubicacion.orientationy,4)))
		    print("Girando...")
		    vel_msg.angular.z = -0.2
		    velocity_publisher.publish(vel_msg)
		
		else:
		    ori=2
		    vel_msg.angular.z = 0.0
		    velocity_publisher.publish(vel_msg)
		    modo=3
		    aux_2=0
		    while(posdeseada):
			    if(round(ubicacion.posy,1)>ydeseado):
				vel_msg.linear.x=0.4
				velocity_publisher.publish(vel_msg)
			    elif(round(ubicacion.posy,1)<ydeseado):
				vel_msg.linear.x=-0.4
				velocity_publisher.publish(vel_msg)
			    else:
				print("Y alcanzado")
				vel_msg.linear.x=0.0
				vel_msg.angular.z=0.0
				velocity_publisher.publish(vel_msg)
				time.sleep(5)
				if(revision==0):
					modo=1
					revision=1
				else:
					modo=3
					revision=0
				posdeseada=False
			    print("Y deseado: "+str(ydeseado)+" Posicion y actual: "+str(ubicacion.posy))
			    if joystick.buttons[0]==1:
				print("Modo manual activado..")
				modo=0
				posdeseada=False
        
	

    if(modo==3):
	print("Presion triangulo modo manual o L2 modo posicion deseada")
	print("Manejo con joytick activo")
	modo=0	    	
    # Wait for the next iteration&
    velocity_publisher.publish(vel_msg)
    rate.sleep()