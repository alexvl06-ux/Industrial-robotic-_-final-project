#!/usr/bin/env python

import rospy
import math
import numpy as np
from sensor_msgs.msg import JointState
from helpers import *
from ikine import *


pi = np.pi

# Eslabon 0 del manipulador con respecto a la base del robot
Tb0 = np.matrix([[1.0, 0.0, 0.0, -0.086875+0.119525],
                 [0.0, 1.0, 0.0, 0.0],
                 [0.0, 0.0, 1.0, 0.37743+0.34858],
                 [0.0, 0.0, 0.0, 1.0]])


def forward_kinematics(q):
    """
    Cinematica directa del robot
    """
    # Longitudes (completar)
    L0=0.06
    L1=0.117
    L2=0.352
    L3=0.3215
    L4=0.30495

    # Matrices DH (completar)
    T1 = dh(L0,q[0],L1,-pi/2) 
    T2 = dh(0,q[1]-pi/2,0,-pi/2)
    T3 = dh(L2,q[2],0,pi/2)
    T4 = dh(0,q[3],0,-pi/2)
    T5 = dh(L3,q[4],0,pi/2)
    T6 = dh(0,q[5],0,-pi/2)
    T7 = dh(L4,q[6],0,0)

    # Efector final con respecto a la base
    T12 = np.dot(T1,T2)
    T34 = np.dot(T3,T4)
    T56 = np.dot(T5,T6)
    T14 = np.dot(T12,T34)
    T16 = np.dot(T14,T56)
    Ttotal =np.dot(T16,T7)
    return Ttotal


if __name__ == "__main__":

    rospy.init_node("sendJointsNode")
    pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
    bmarker= BallMarker(color['RED'])
    bmarker_des  = BallMarker(color['GREEN'])
    # Nombres de las articulaciones
    jnames = ('shoulder_pan_joint', 'shoulder_lift_joint',
              'upperarm_roll_joint', 'elbow_flex_joint',
              'forearm_roll_joint', 'wrist_flex_joint', 'wrist_roll_joint',
              'r_gripper_finger_joint', 'l_gripper_finger_joint', 'bellows_joint',
              'r_wheel_joint', 'l_wheel_joint', 'torso_lift_joint',
              'head_pan_joint', 'head_tilt_joint')

    # ========================================================================
    #                Modificar aqui
    # ========================================================================

    # Configuracion articular (en radianes)
    #q = [-pi/2, -pi/2, pi/2, 0.4, -0.2, 0.7, 0]
    q = [0, 0, 0, 0, 0, 0, 0]
    other_joints2 = [0.04,0.04,0.,0.,0.,0.,0.,0.]
    q2=other_joints2
    # Cinematica directa para la configuracion articular (efector final con
    # respecto al eslabon 0 que es diferente de la base misma del robot, en
    # este caso)
    T0e = forward_kinematics(q)
    #T0e=np.dot(Tb0,T0e) 
    print np.round(T0e,3)


    #Inversa
    pos_des=[1.095,0,0.06]
    Q_inv=ikine_ur5(pos_des,q)
    T_inv=forward_kinematics(Q_inv)
    T_inv=np.dot(Tb0,T_inv) 
    print  np.round(T_inv,3)


    # Hacer que Tf muestrela posicion con respecto a la base del robot y no
    # solo la base del manipulador
    Tf = forward_kinematics(q)
    Tf=np.dot(Tb0,Tf)   
 
    bmarker.position(Tf)
    print np.round(Tf,3)

    # =======================================================================
    # Desired position
    xd = np.array([0.55,0.5,0.26])
    # Initial configuration
    q0 = [0, 0, 0, 0, 0, 0, 0]
    q3 = ikine_ur5(xd, q0)
    xd[2]+=0.37743+0.34858
    # Resulting position (end effector with respect to the base link)
    T = forward_kinematics(q3)
    #T[2,3]+=0.37743+0.34858
    T=np.dot(Tb0,T) 
    print('Obtained value:\n', np.round(T,3))

    # Red marker shows the achieved position
    bmarker.xyz(T[0:3,3])
    bmarker.position(T)
    # Green marker shows the desired position
    bmarker_des.xyz(xd)

    # Objeto (mensaje) de tipo JointState
    jstate = JointState()
    # Asignar valores al mensaje
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    other_joints = [0.04,0.04,0.,0.,0.,0.,0.,0.]
    jstate.position = q + other_joints

    # Frecuencia del envio (en Hz)
    rate = rospy.Rate(100)
    # Bucle de ejecucion continua
    while not rospy.is_shutdown():
        # Tiempo actual (necesario como indicador para ROS)
        jstate.header.stamp = rospy.Time.now()
        # Publicar mensaje
        pub.publish(jstate)
        bmarker.publish()
        bmarker_des.publish()
        # Esperar hasta la siguiente  iteracion
        rate.sleep()
